#include<stdbool.h>
#include<stdint.h>
#include "inc/tm4c1294ncpdt.h"

uint32_t i, Cta,DF,DA,t, DD,DI,l,control;
int SensorFrontal();
int SensorTrasero();
int SensorDerecho();
int SensorIzquierdo();
void Delay(unsigned long counter); // used to add delay
void HC05_init(void); // Initialize UART5 module for HC-05
char Bluetooth_Read(void); //Read data from Rx5 pin of TM4C123
void Bluetooth_Write(unsigned char data); // Transmit a character to HC-05 over Tx5 pin
void Bluetooth_Write_String(char *str); // Transmit a string to HC-05 over Tx5 pin

int main(void) {
SYSCTL_RCGCGPIO_R = 0x3F18; //habilita Reloj del PTO. P, E Y N
i = SYSCTL_PRGPIO_R;        //retardo para que el reloj se habilite

HC05_init();
Bluetooth_Write_String("BIENVENIDO\n");
SysCtlDelay(10000);
Bluetooth_Write_String("Cargando\n");
SysCtlDelay(1000000);
Bluetooth_Write_String("[==");
SysCtlDelay(100000);
Bluetooth_Write_String("===");
SysCtlDelay(100000);
Bluetooth_Write_String("===");
SysCtlDelay(100000);
Bluetooth_Write_String("===");
SysCtlDelay(100000);
Bluetooth_Write_String("===]\n");
SysCtlDelay(100000);


GPIO_PORTN_DIR_R |= 0x03;
GPIO_PORTN_DEN_R |= 0x03;
GPIO_PORTE_AHB_DIR_R =  0B000111;
GPIO_PORTE_AHB_DEN_R |= 0B111111;
GPIO_PORTD_AHB_DIR_R =  0X07;
GPIO_PORTD_AHB_DEN_R |= 0X07;
GPIO_PORTD_AHB_DR8R_R = 0X03;
GPIO_PORTP_DIR_R |= 0x01;
GPIO_PORTP_DEN_R |= 0x03;
GPIO_PORTN_DATA_R &= ~0x03;     // Apaga LED's
GPIO_PORTE_AHB_DATA_R &=~ 0x07; //apago la señal de disparo del sensor
GPIO_PORTL_DIR_R |= 0x0F;
GPIO_PORTL_DEN_R |= 0x0F;

//Declarar puerto L para motores
//Declarar puerto D luces y emergencia
l=0;
while(1){
HC05_init();
//Posición inicial.

Posicion();
//control=5;

Bluetooth_Write_String("LISTO\n");


char c = Bluetooth_Read();
//char c = 'A';

if( c == 'A'){
Bluetooth_Write_String("Voy a avanzar\n");
control=1;
}
else if( c =='R'){
//GPIO_PORTF_AHB_DATA_R  &=~(1<<0); //GPIO_PORTN_DATA_R  &=~(1<<0);//GPIO_PORTF_AHB_DATA_R  &=~(1<<0);
Bluetooth_Write_String("Voy a retroceder\n");
control=2;
}
else if( c =='D'){
 Bluetooth_Write_String("GIRO DER\n");
 control=3;
}
else if( c =='I'){
Bluetooth_Write_String("GIRO IZQ\n");
control=4;
}
else if( c =='F'){
 Bluetooth_Write_String("Sonando\n");
 control=5;
}
else if( c=='L'){
 Bluetooth_Write_String("Luces encendidas\n");
 control=6;
}
else if( c=='O'){
 Bluetooth_Write_String("Luces apagadas\n");
 control=7;
}
else if( c=='P'){
 Bluetooth_Write_String("alto\n");
 GPIO_PORTL_DATA_R = 0X00;
 control=0;
}
//Bluetooth_Write_String("Respuesta");

controler(control);








}}


int controler(int control){
switch(control){
        case 1:
            AVANZA();
            control=0;
            break;
        case 2:
            RETROCEDE();
            control=0;
            break;
        case 3:
            GiroDer();
            control=0;
            break;
        case 4:
           GiroIzq();
           control=0;
           break;
        case 5:
           find();
           control=0;
           break;
        case 6:
            luces(0);
            control=0;
            break;
        case 7:
           luces(1);
           control=0;
           break;

        }
}
int AVANZA(){
while (DF>25){

//----PULSO DE DISPARO  ------------
      GPIO_PORTE_AHB_DATA_R |= 0x01;  //nivel alto en trig
      SysCtlDelay(100);  //  Retardo > 10us
      GPIO_PORTE_AHB_DATA_R &=~ 0x01; //nivel bajo en trig
//----------------------------------

while ((GPIO_PORTE_AHB_DATA_R & 0x08) == 0);    //espero nivel alto de echo

//---- CUENTA ANCHO DE PULSO  ----------
  Cta = 0;
  do{
             Cta++;
             t++;
             DF=(Cta*10)/(292/2);
             GPIO_PORTL_DATA_R = 0X0A;
         }while ( ((GPIO_PORTE_AHB_DATA_R & 0x08)==0x08) & (Cta  < 0x0000FFFF));

}
GPIO_PORTL_DATA_R = 0X00;
Bluetooth_Write_String("Obstaculo detectado\n");
}

int RETROCEDE(){
while (DA>20){

    GPIO_PORTN_DATA_R ^= 0X01;  //FLASH LED D2 (PN0)
    SysCtlDelay(2666666);

    //----PULSO DE DISPARO  ------------
    GPIO_PORTP_DATA_R |= 0x01;  //nivel alto en trig
    SysCtlDelay(100);  //  Retardo > 10us
    GPIO_PORTP_DATA_R &=~ 0x01; //nivel bajo en trig
    //----------------------------------

    while ((GPIO_PORTP_DATA_R & 0x02) == 0);    //espero nivel alto de echo

    //---- CUENTA ANCHO DE PULSO  ----------
    Cta = 0;
    do{
     Cta++;
     t++;
     DA=(Cta*10)/(292/2);
     GPIO_PORTL_DATA_R = 0X05;
    }while ( ((GPIO_PORTP_DATA_R & 0x02)==0x02) & (Cta  < 0x0000FFFF));

}
GPIO_PORTL_DATA_R = 0X00;
Bluetooth_Write_String("Obstaculo detectado\n");
}


int GiroIzq(){
    GPIO_PORTD_AHB_DATA_R = 0x02;
    GPIO_PORTL_DATA_R = 0X09;
    for(t=0 ; t<6000000 ; t++);
    GPIO_PORTL_DATA_R = 0X00;
    GPIO_PORTD_AHB_DATA_R = 0x00;
   /*Posicion();
   while(DD>(DF-5)){
    SensorDerecho();
   GPIO_PORTL_DATA_R = 0X09;
   
   GPIO_PORTL_DATA_R = 0X00;*/
}

int GiroDer(){
    GPIO_PORTD_AHB_DATA_R = 0x02;
    GPIO_PORTL_DATA_R = 0X06;
    for(t=0 ; t<6000000 ; t++);
    GPIO_PORTL_DATA_R = 0X00;
    GPIO_PORTD_AHB_DATA_R = 0x00;
   /*Posicion();
   while(DI>(DF-5)){
   SensorIzquierdo();
   GPIO_PORTL_DATA_R = 0X06;
   }
   GPIO_PORTL_DATA_R = 0X00;*/
}

int find(){
    int aux=0;
    while(aux<10){
   GPIO_PORTD_AHB_DATA_R = 0x03;
   for(t=0 ; t<1000000 ; t++);
    GPIO_PORTD_AHB_DATA_R = 0x00;
    for(t=0 ; t<1000000 ; t++);
    GPIO_PORTD_AHB_DATA_R = 0x06;
    for(t=0 ; t<1000000 ; t++);
    GPIO_PORTD_AHB_DATA_R = 0x00;
     aux++;
    }
GPIO_PORTD_AHB_DATA_R = 0x00;
}

int luces(int l){

switch(l){
    case 0:
        GPIO_PORTD_AHB_DATA_R = 0x04;
        l=1;
        break;
    case 1:
        GPIO_PORTD_AHB_DATA_R = 0x00;
        l=0;
        break;
    }
    //GPIO_PORTD_AHB_DATA_R = 0x02;
}
int SensorFrontal(){
    while (t<2000){

                      GPIO_PORTN_DATA_R ^= 0X01;  //FLASH LED D2 (PN0)
                      SysCtlDelay(2666666);

    //----PULSO DE DISPARO  ------------
                      GPIO_PORTE_AHB_DATA_R |= 0x01;  //nivel alto en trig
                      SysCtlDelay(100);  //  Retardo > 10us
                      GPIO_PORTE_AHB_DATA_R &=~ 0x01; //nivel bajo en trig
    //----------------------------------

              while ((GPIO_PORTE_AHB_DATA_R & 0x08) == 0);    //espero nivel alto de echo

    //---- CUENTA ANCHO DE PULSO  ----------
                  Cta = 0;
                  do{
                             Cta++;
                             t++;
                             DF=(Cta*10)/(292/2);
                         }while ( ((GPIO_PORTE_AHB_DATA_R & 0x08)==0x08) & (Cta  < 0x0000FFFF));

              }

}

int SensorIzquierdo(){
    while (t<2000){

                      GPIO_PORTN_DATA_R ^= 0X01;  //FLASH LED D2 (PN0)
                      SysCtlDelay(2666666);

    //----PULSO DE DISPARO  ------------
                      GPIO_PORTE_AHB_DATA_R |= 0x02;  //nivel alto en trig
                      SysCtlDelay(100);  //  Retardo > 10us
                      GPIO_PORTE_AHB_DATA_R &=~ 0x02; //nivel bajo en trig
    //----------------------------------

              while ((GPIO_PORTE_AHB_DATA_R & 0x10) == 0);    //espero nivel alto de echo

    //---- CUENTA ANCHO DE PULSO  ----------
                  Cta = 0;
                  do{
                             Cta++;
                             t++;
                             DI=(Cta*10)/(292/2);
                         }while ( ((GPIO_PORTE_AHB_DATA_R & +0x10)==0x10) & (Cta  < 0x0000FFFF));

              }

}

int SensorDerecho(){
    while (t<2000){

                      GPIO_PORTN_DATA_R ^= 0X01;  //FLASH LED D2 (PN0)
                      SysCtlDelay(2666666);

    //----PULSO DE DISPARO  ------------
                      GPIO_PORTE_AHB_DATA_R |= 0x04;  //nivel alto en trig
                      SysCtlDelay(100);  //  Retardo > 10us
                      GPIO_PORTE_AHB_DATA_R &=~ 0x04; //nivel bajo en trig
    //----------------------------------

              while ((GPIO_PORTE_AHB_DATA_R & 0x20) == 0);    //espero nivel alto de echo

    //---- CUENTA ANCHO DE PULSO  ----------
                  Cta = 0;
                  do{
                             Cta++;
                             t++;
                             DD=(Cta*10)/(292/2);
                         }while ( ((GPIO_PORTE_AHB_DATA_R & 0x20)==0x20) & (Cta  < 0x0000FFFF));

              }

}

int SensorTrasero(){
    while (t<2000){

                      GPIO_PORTN_DATA_R ^= 0X01;  //FLASH LED D2 (PN0)
                      SysCtlDelay(2666666);

    //----PULSO DE DISPARO  ------------
                      GPIO_PORTP_DATA_R |= 0x01;  //nivel alto en trig
                      SysCtlDelay(100);  //  Retardo > 10us
                      GPIO_PORTP_DATA_R &=~ 0x01; //nivel bajo en trig
    //----------------------------------

              while ((GPIO_PORTP_DATA_R & 0x02) == 0);    //espero nivel alto de echo

    //---- CUENTA ANCHO DE PULSO  ----------
                  Cta = 0;
                  do{
                             Cta++;
                             t++;
                             DA=(Cta*10)/(292/2);
                         }while ( ((GPIO_PORTP_DATA_R & 0x02)==0x02) & (Cta  < 0x0000FFFF));

              }

}
int Posicion(){
    t=0;
    SensorFrontal();
    t=0;
    SensorTrasero();
    t=0;
    SensorIzquierdo();
    t=0;
    SensorDerecho();
}

/*void  delayMs ( uint32_t ui32Ms) {

    // 1 ciclo de reloj = 1 / SysCtlClockGet() segundo
    // 1 SysCtlDelay = 3 ciclo de reloj = 3 / SysCtlClockGet() segundo
    // 1 segundo = SysCtlClockGet() / 3
    // 0.001 segundo = 1 ms = SysCtlClockGet() / 3 / 1000

    SysCtlDelay (ui32Ms * ( SysCtlClockGet ()/ 3 / 1000 ));
}*/

void HC05_init(void)
{


    SYSCTL_RCGCUART_R |= 0x10;  /* enable clock to UART4 */
   //SYSCTL_RCGCGPIO_R |= 0x200;  /* enable clock to PORTK for PK0/Rx and RK1/Tx */
    Delay(1);
    /* UART0 initialization */
            UART4_CTL_R = 0;         /* UART4 module disable */
           UART4_IBRD_R = 104;      /* for 9600 baud rate, integer = 104 */
           UART4_FBRD_R = 11;       /* for 9600 baud rate, fractional = 11*/
           UART4_CC_R = 0;          /*select system clock*/
           UART4_LCRH_R = 0x60;     /* data lenght 8-bit, not parity bit, no FIFO */
           UART4_CTL_R = 0x301;     /* Enable UART4 module, Rx and Tx */
          // UART4_DR_R = 0;
           /* UART4 TX4 and RX4 use PK0 and PK1. Configure them digital and enable alternate function */
                   GPIO_PORTK_DEN_R    = 0x03;      /* set PK0 and PK1 as digital */
                   GPIO_PORTK_AFSEL_R = 0x03;    /* Use PK0,PK1 alternate function */
                   GPIO_PORTK_AMSEL_R  = 0;    /* Turn off analg function*/
                   GPIO_PORTK_PCTL_R = 0x00000011;     /* configure PK0 and PK1 for UART */
}

char Bluetooth_Read(void)
{
    char data;
    while((UART4_FR_R & (1<<4)) != 0); /* wait until Rx buffer is not full */

    data = UART4_DR_R ;      /* before giving it another byte */
    return (unsigned char) data;
}

void Bluetooth_Write(unsigned char data)
{
    while((UART4_FR_R & (1<<5))!= 0); /* wait until Tx buffer not full */
    UART4_DR_R = data;                  /* before giving it another byte */
}

void Bluetooth_Write_String(char *str)
{
  while(*str)
    {
        Bluetooth_Write(*(str++));
    }
}

void Delay(unsigned long counter)
{
    unsigned long i = 0;

    for(i=0; i< counter; i++);
}
